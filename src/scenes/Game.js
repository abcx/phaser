import Player from "../gameObjects/Player";
import Debugger from "../gameObjects/Debugger";
// import Goomba from "../gameObjects/Goomba";
import Enemy from "../gameObjects/Enemy";
import Coin from "../gameObjects/Coin";
// import Flag from "../gameObjects/Flag";

import tiles from "../config/tiles";
import generateAnimations from "../config/animations";

class Game extends Phaser.Scene {
  constructor() {
    super("Game");
  }

  // Tileset by https://www.deviantart.com/thecrushedjoycon/art/Super-Mario-Bros-Mega-Tileset-Ver-2-842092790
  // Goombas are from https://mfgg.net/index.php?act=resdb&param=02&c=1&id=4200
  // Mario from https://www.mariomayhem.com/downloads/sprites/super_mario_bros_sprites.php
  // Atlas generated by https://gammafp.github.io/atlas-packer-phaser/editor
  preload() {
    this.load.spritesheet('tiles', 'assets/tiles.png', {frameWidth: 70, frameHeight: 70});
    this.load.tilemapTiledJSON("map", "./assets/level_001.json");
    this.load.atlas(
      "atlas",
      "./assets/player.png",
      "./assets/player_atlas.json"
    );

    this.load.atlas(
      "enemies",
      "./assets/enemies.png",
      "./assets/enemies_atlas.json"
    );

    this.load.on("complete", () => {
      generateAnimations(this);
    });
  }

  create() {
    const noCollisionTiles = [tiles.EMPTY, tiles.FLAG_LEFT];

    this.map = this.make.tilemap({ key: "map" });
    this.tileset = this.map.addTilesetImage("tiles", "tiles");

    this.platform = this.map.createLayer("platforms", this.tileset, 0, 0);

    this.map.createLayer("background", this.tileset, 0, 0);
    this.platform.setCollisionByExclusion(noCollisionTiles, true);

    this.player = new Player(this, 30, 550).collideWith(this.platform);
    this.enemies = new Enemy(this).collideWith(this.platform);
    this.coins = new Coin(this).collideWith(this.player.sprite);
    // this.flag = new Flag(this);
    this.debugger = new Debugger(this);

    this.inputs = this.input.keyboard.createCursorKeys();
  }

  update() {
    this.player.update(this.inputs);
    this.enemies.update();
    // this.coins.update();
    this.debugger.debuggerEnabled && this.debugger.update();
  }
}

export default Game;
