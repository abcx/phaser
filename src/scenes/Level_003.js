import Player from "../gameObjects/Player";
import Debugger from "../gameObjects/Debugger";
import Enemy from "../gameObjects/Enemy";
import Coin from "../gameObjects/Coin";
import Diamond from "../gameObjects/Diamond";
import Flag from "../gameObjects/Flag";
import tiles from "../config/tiles";
import levelsConf from "../config/levels.conf";
import generateAnimations from "../config/animations";
import resetScore from '../ui/resetScore';

class Level_003 extends Phaser.Scene {
  level = "level_003";

  constructor() {
    super("Level_003");
  }

  // Tileset by https://www.deviantart.com/thecrushedjoycon/art/Super-Mario-Bros-Mega-Tileset-Ver-2-842092790
  // Goombas are from https://mfgg.net/index.php?act=resdb&param=02&c=1&id=4200
  // Mario from https://www.mariomayhem.com/downloads/sprites/super_mario_bros_sprites.php
  // Atlas generated by https://gammafp.github.io/atlas-packer-phaser/editor

  preload() {
    // load tiles spritesheet
    this.load.spritesheet(
      `${this.level}-tiles`,
      `assets/${levelsConf[this.level].tiles}.png`,
      {
        frameWidth: 70,
        frameHeight: 70,
      }
    );
    // load level data
    this.load.tilemapTiledJSON(this.level, `./assets/${this.level}.json`);

    // load atlas file for Player
    this.load.atlas(
      "atlas",
      `./assets/${levelsConf[this.level].player}.png`,
      `./assets/${levelsConf[this.level].player}_atlas.json`
    );
    // load atlas file for enemies
    this.load.atlas(
      "enemies",
      `./assets/${levelsConf[this.level].enemies}.png`,
      `./assets/${levelsConf[this.level].enemies}_atlas.json`
    );
    // generate animations
    this.load.on("complete", () => {
      generateAnimations(this);
    });
  }

  create() {
    const noCollisionTiles = [tiles.EMPTY, tiles.FLAG_LEFT];

    this.map = this.make.tilemap({ key: this.level });
    this.tileset = this.map.addTilesetImage("tiles", `${this.level}-tiles`);

    this.platform = this.map.createLayer("platforms", this.tileset, 0, 0);
    this.platform.setCollisionByExclusion(noCollisionTiles, true);

    // this.map.createLayer("background", this.tileset, 0, 0);

    this.player = new Player(this, 30, 550).collideWith(this.platform);
    this.enemies = new Enemy(this).collideWith(this.platform);
    this.coins = new Coin(this).collideWith(this.player.sprite);
    this.diamonds = new Diamond(this).collideWith(this.player.sprite);
    this.flag = new Flag(this).collideWith(this.player.sprite);
    this.debugger = new Debugger(this);

    this.inputs = this.input.keyboard.createCursorKeys();

    this.input.once(
      "pointerdown",
      function (event) {
        console.log("From Level_003 to Level_004");
        resetScore();
        this.scene.start("Level_004");
      },
      this
    );
  }

  update() {
    this.player.update(this.inputs);
    this.enemies.update();
    // this.coins.update();
    this.debugger.debuggerEnabled && this.debugger.update();
  }
}

export default Level_003;
